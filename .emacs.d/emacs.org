
* Main Emacs Config                                                   :TOC_5:
    - [[#use-package-extensions][Use Package Extensions]]
    - [[#frame-and-buffer-behaviour][Frame and Buffer Behaviour]]
    - [[#custom-variables][Custom Variables]]
    - [[#external-program-execution][External Program Execution]]
    - [[#buffer-behaviour][Buffer Behaviour]]
    - [[#font-and-display][Font and Display]]
    - [[#function-aliases][Function Aliases]]
    - [[#global-key-mappings][Global Key Mappings]]
    - [[#literate-library-directories][Literate Library Directories]]
        - [[#literate-mode-configurations][Literate Mode Configurations]]
    - [[#file-backups-and-autosave][File Backups and Autosave]]
    - [[#os-specific-configuration][OS Specific Configuration]]
    - [[#shell-configuration][Shell Configuration]]

*** Use Package Extensions
    Enable Emacs to install dependent system packages
    #+begin_src emacs-lisp
    (use-package use-package-ensure-system-package
      :ensure t)
    #+end_src

*** Frame and Buffer Behaviour
    I prefer sparse frames so remove as much as we can
    #+BEGIN_SRC emacs-lisp

      ;; be quiet
      (setq-default inhibit-startup-message  t)

      ;; clear the furniture
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

    #+END_SRC

*** Custom Variables
    Place all custom-defined variables in their own file and store the custom
    variable file in the local machine's home directory outside of version
    control. This enables us to keep specific config local to each machine
   #+BEGIN_SRC emacs-lisp

     (setq-default custom-file "~/.emacs-custom.el")
     (load custom-file 'noerror)

   #+END_SRC

*** External Program Execution
    Ensure we can execute programs located at various paths by setting the
    execution path from our shell
    #+BEGIN_SRC emacs-lisp

      (use-package exec-path-from-shell
      :ensure t
      :config
      (exec-path-from-shell-initialize))

    #+END_SRC

*** Buffer Behaviour
    #+begin_src emacs-lisp

    (setq-default line-number-mode t)
    (setq-default column-number-mode t)
    (setq-default fill-column 78)
    (setq-default split-width-threshold 120)
    (setq-default truncate-lines t)
    (setq-default indent-tabs-mode nil)
    (setq-default ring-bell-function 'ignore)
    (setq-default transient-mark-mode t)
    (setq-default x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
    (setq-default next-line-add-newlines t)
    (add-to-list 'write-file-functions 'delete-trailing-whitespace)

    (global-font-lock-mode t)
    (mouse-avoidance-mode 'exile)
    (show-paren-mode t)
    (global-auto-revert-mode 1)
    (global-subword-mode 1)
    (global-prettify-symbols-mode 1)
    #+end_src

*** Font and Display
    #+begin_src emacs-lisp

    (defun mjr/init-font-size (frame font value)
      (set-frame-parameter frame 'font
                           (concat font "-" (number-to-string value))))

    (defun mjr/set-font (size)
      (interactive "nSize: ")
      (mjr/init-font-size (selected-frame) "Hack" size))

    (mjr/set-font 16)
    (toggle-frame-maximized)
    #+end_src

*** Function Aliases
    #+begin_src emacs-lisp

      (fset 'yes-or-no-p 'y-or-n-p)

    #+end_src

*** Global Key Mappings
    #+BEGIN_SRC emacs-lisp

      (global-set-key "\C-w"     'backward-kill-word)
      (global-set-key "\C-x\C-k" 'kill-region)
      (global-set-key "\C-c\C-k" 'kill-region)
      (global-set-key "\C-xr"    'query-replace-regexp)
      (global-set-key "\C-xl"    'goto-line )
      (global-set-key "\C-cb"    'bury-buffer )
      (global-set-key "\C-cf"    'revert-buffer )
      (global-set-key "\r"       'newline-and-indent)
      (global-unset-key "\C-z")
      (global-unset-key "\C-x\C-z")
    #+END_SRC

*** Literate Library Directories
    Add load directories for mode-specific literate configs
    #+BEGIN_SRC emacs-lisp

    (defun mjr/load-literate-cfg ()
      "Load literate config files using org-babel."
      (let ((cfg-conf-dir "~/.emacs.d/cfg/"))
        (mapcar #'(lambda (conf-file)
                    (org-babel-load-file (concat cfg-conf-dir conf-file)))
                (directory-files cfg-conf-dir nil "^[^.]\.*.org"))))

    (mjr/load-literate-cfg)

    (defun mjr/insert-literate-config-file-list ()
      (interactive)
      (let ((cfg-conf-dir "~/.emacs.d/cfg/")
            (file-list nil))
        (setq file-list (directory-files cfg-conf-dir nil "^[^.]\.*.org"))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "[:]CFGLST:" (point-max) t)
            (let ((beg (point))
                  (end
                   (save-excursion
                     (when (search-forward-regexp "^\\*" (point-max))
                       (forward-line -1))
                     (end-of-line)
                     (point))))
              (delete-region beg end))
            (insert "\n")
            (mapcar '(lambda (file) (insert (format "      - [[file:cfg/%s]]\n" file))) file-list)))))

    #+END_SRC

***** Literate Mode Configurations                                   :CFGLST:
      - [[file:cfg/buffer-management.org]]
      - [[file:cfg/color-theme.org]]
      - [[file:cfg/completion.org]]
      - [[file:cfg/docker.org]]
      - [[file:cfg/emacs-lisp.org]]
      - [[file:cfg/email.org]]
      - [[file:cfg/flycheck.org]]
      - [[file:cfg/golang.org]]
      - [[file:cfg/javascript.org]]
      - [[file:cfg/markup.org]]
      - [[file:cfg/mode-line.org]]
      - [[file:cfg/org-mode.org]]
      - [[file:cfg/paredit.org]]
      - [[file:cfg/rust.org]]
      - [[file:cfg/search.org]]
      - [[file:cfg/typescript.org]]
      - [[file:cfg/vcs.org]]
      - [[file:cfg/web.org]]
      - [[file:cfg/writing.org]]

*** File Backups and Autosave
    #+begin_src emacs-lisp
    (setq-default backup-dir "~/.emacs.d/.backups/")
    (make-directory backup-dir t)
    (setq-default backup-directory-alist '(("." . "~/.emacs.d/.backups")))
    (setq-default autosave-dir "~/.emacs.d/.autosaves/")
    (make-directory autosave-dir t)
    (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))
    (setq-default delete-old-versions -1)
    (setq-default version-control t)
    #+end_src

*** OS Specific Configuration
    #+BEGIN_SRC emacs-lisp

    (setq mac-command-modifier 'meta)

    #+END_SRC

*** Shell Configuration
    #+BEGIN_SRC emacs-lisp
    (setq multi-term-program "/bin/zsh")
    #+END_SRC
