* LSP Mode
  #+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
      :ensure t
      :init
      (setq lsp-prefer-flymake nil
            lsp-auto-guess-root t
            gc-cons-threshold 100000000
            read-process-output-max (* 1024 1024)
            lsp-prefer-capf t)
      (add-hook 'python-mode-hook #'lsp)
      (add-hook 'js2-mode-hook #'lsp)
      (add-hook 'go-mode-hook #'lsp)
      (add-hook 'kotlin-mode-hook #'lsp)
      (add-hook 'javascript-mode-hook #'lsp)
      (add-hook 'typescript-mode-hook #'lsp)
      (add-hook 'lsp-after-initialize-hook
                (lambda ()
                  (flycheck-add-next-checker 'lsp 'javascript-eslint)
                  (flycheck-add-next-checker 'lsp 'kotlin-ktlint))))

  (use-package lsp-ui
      :ensure t
      :config
      (setq lsp-ui-sideline-enable t
            lsp-ui-sideline-show-symbol nil
            lsp-ui-sideline-show-hover t
            lsp-ui-sideline-show-code-actions t
            lsp-ui-peek-enable t
            lsp-ui-imenu-enable t
            lsp-ui-doc-enable t))

  (use-package lsp-ivy
      :ensure t
      :after lsp-mode
      :commands lsp-ivy-workspace-symbol)
  #+END_SRC

* Node Development (JavaScript and Typescript)
  #+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :ensure t
    :commands (add-node-modules-path)
    :init
    (add-hook 'typescript-mode-hook #'add-node-modules-path)
    (add-hook 'js2-mode-hook #'add-node-modules-path)
    (add-hook 'web-mode-hook #'add-node-modules-path))

  (use-package npm-mode
    :ensure t
    :commands (npm-mode)
    :init
    (add-hook 'typescript-mode-hook #'npm-mode))
  #+END_SRC

* Typescript Development
  #+BEGIN_SRC emacs-lisp
  #+END_SRC

* JavaScript Development
  #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :interpreter "node"
    :init
    (setq js-indent-level 2))
  #+END_SRC

* Kotlin Development
  #+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode
    :ensure t
    :mode "\\.kt\\'")

  (use-package flycheck-kotlin
    :ensure t
    :init
    (flycheck-kotlin-setup))
  #+END_SRC

* Java Development
  #+BEGIN_SRC emacs-lisp
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  ;; (use-package dap-java :ensure nil)

  ;; Spring Boot
  ;; (require 'lsp-java-boot)
  ;; (add-hook 'lsp-mode-hook #'lsp-lens-mode)
  ;; (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
  #+END_SRC

* Code Formatting
  #+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :commands (prettier-js-mode)
    :init
    (add-hook 'typescript-mode-hook #'prettier-js-mode)
    (add-hook 'js2-mode-hook #'prettier-js-mode)
    ;;(add-hook 'web-mode-hook #'prettier-js-mode)
    )
  #+END_SRC

* Mixed Web Programming
  #+begin_src emacs-lisp
    (use-package web-mode
      :ensure t
      :mode (("\\.html?\\'" . web-mode)
             ("\\.tsx\\'" . web-mode)
             ("\\.jsx\\'" . web-mode))
      :config
      (setq web-mode-markup-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-block-padding 2
            web-mode-comment-style 2

            web-mode-enable-css-colorization t
            web-mode-enable-auto-pairing t
            web-mode-enable-comment-keywords t
            web-mode-enable-current-element-highlight t
            web-mode-enable-auto-indentation nil)
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))
      ;; enable typescript-tslint checker
      (flycheck-add-mode 'typescript-tslint 'web-mode))
  #+end_src

* Directory Environment
  #+begin_src emacs-lisp
  (use-package direnv
   :config
   (direnv-mode))
  #+end_src
